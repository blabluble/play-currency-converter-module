{"name":"Play Currency Converter","tagline":"This is a play module for currency conversion","body":"# play-currency-converter-module\r\n\r\nThis is a play module for currency conversion. The current version (1.1.5) is compatible with play-2.2. For compatibility with play version 2.1.x use the module version 1.1.4.\r\n\r\nCurrently, the module is using the [Get Exchange Rates](http://www.getexchangerates.com/) service to made the conversion.\r\n\r\n## Configuring\r\n\r\nThe first step is include the currency converter in your dependencies list, in `Build.scala` file:\r\n\r\n```scala\r\nimport sbt._\r\nimport Keys._\r\nimport play.Project._\r\n\r\nobject ApplicationBuild extends Build {\r\n\r\n  val appName         = \"currency-converter-sample\"\r\n  val appVersion      = \"1.0-SNAPSHOT\"\r\n\r\n  val appDependencies = Seq(\r\n    // Add your project dependencies here,\r\n    javaCore,\r\n    javaJdbc,\r\n    javaEbean,\r\n    \"com.edulify\" % \"currency-converter_2.10\" % \"1.1.6\"\r\n  )\r\n\r\n  val main = play.Project(appName, appVersion, appDependencies).settings(\r\n    // Add your own project settings here\r\n    resolvers += Resolver.url(\"Edulify Repository\", url(\"http://edulify.github.io/modules/releases/\"))(Resolver.ivyStylePatterns)\r\n  )\r\n\r\n}\r\n\r\n```\r\n\r\nDon't forget to add the resolver to your list of resolvers, or it won't work!\r\n\r\n### Caching\r\n\r\nThis module saves a cache of the request made for the service. The default cache time to live is 60 seconds, but this time can be changed using the method `setCacheTime(long seconds)`.\r\n\r\nAlso, you can set cache off, by calling the method `useCache(false)`. **Warning**: by setting off the cache, you can overload your system (and the service) due to multiple requests. Without cache activated, every call to Converter.convert will make a request to the choosen web service.\r\n\r\n#### Caching auto-update job (optional)\r\n\r\nIn order to keep your cache always updated, you can create a background job to auto-update in frequent intervals (based on *time to live* of the cache). To do this, there are three simple steps to follow:\r\n\r\n- Start the job inside the `Global` class:\r\n\r\n```java\r\nimport play.Application;\r\nimport play.GlobalSettings;\r\n\r\nimport com.edulify.modules.currency.ConverterCacheJob;\r\n\r\n@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\r\npublic class Global extends GlobalSettings {\r\n\r\n  @Override\r\n  public void onStart(Application app) {\r\n   ConverterCacheJob.startConverterCacheUpdate();\r\n  }\r\n}\r\n```\r\n- Set up your `Global` class in your `application.conf`:\r\n\r\n```\r\n# Global object class\r\n# ~~~~~\r\n# Define the Global object class for this application.\r\n# Default to Global in the root package.\r\napplication.global=Global\r\n```\r\n- Set the name for the dispatcher that will do this job (also in the `application.conf` file):\r\n\r\n```\r\nconverter.dispatcher.name = \"converter\"\r\n```\r\n\r\n### Precision\r\n\r\nBy default, the module makes operations using a precision of 100 decimals. You can change this value using the method `setPrecision(int precision)`. **Warning**: Low precisions can result in wrong conversions. Change it carefully.\r\n\r\n### Global configurations\r\n\r\nThese configurations (about caching and precision) can also be setted globally in the `application.conf` file, using the following keys:\r\n\r\n```\r\nconverter {\r\n  cacheTTL  = 600\r\n  useCache  = true\r\n  precision = 100\r\n}\r\n```\r\nor\r\n```\r\nconverter.cacheTTL  = 10\r\nconverter.useCache  = true\r\nconverter.precision = 100\r\n```\r\n\r\n## Using\r\n\r\nTo use this module, its enough to import it in your class and use the static method `Converter.convert`:\r\n\r\n```java\r\nimport com.edulify.modules.currency.Converter;\r\n\r\npublic class Application {\r\n  public static Result index() {\r\n    ...\r\n    try {\r\n      BigDecimal convertedValue = Converter.convert(new BigDecimal(199.0), \"EUR\", \"USD\");\r\n    } catch (InvalidCurrencyException ex) {\r\n      ...\r\n    } catch (CommunicationErrorException ex) {\r\n      ...\r\n    }\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\nThis method, as shown in the example, should raise two exceptions:\r\n- `InvalidCurrencyException`: thrown when the currency code is not valid for the service.\r\n- `CommuncationErrorException`: thrown when the service returns an invalid json.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}